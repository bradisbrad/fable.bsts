% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model.R
\name{BSTS}
\alias{BSTS}
\title{bsts procedure modelling}
\usage{
BSTS(formula, ...)
}
\arguments{
\item{formula}{A symbolic description of the model to be fitted of class \code{formula}.}

\item{...}{ Extra arguments to be passed to
    \code{\link[BoomSpikeSlab]{SpikeSlabPrior}} (see the entry for the
    \code{prior} argument, above).}
}
\description{
Prepares a bsts model specification for use within the \code{fable} package.
}
\details{
The bsts modelling interface uses a \code{formula} based model specification
(\code{y ~ x}), where the left of the formula specifies the response variable,
and the right specifies the model's predictive terms. Like any model in the
fable framework, it is possible to specify transformations on the response.

A bsts model supports local and semi-local linear trends, local levels
with a random walk trend, additive seasonality and exogenous regressors.
These can be specified using the 'specials' functions detailed
below. The introduction vignette provides more details on how to model data
using this interface to prophet: \code{vignette("intro", package="fable.bsts")}.
}
\section{Specials}{


\subsection{intercept}{
The \code{intercept} special is used to specify the intercept parameters.
\preformatted{
intercept()
}
}

\subsection{ar}{
The \code{ar} special is used to specify the autoregressive parameters.
\preformatted{
ar(lag = NULL)
}

\tabular{ll}{
\code{lag}  \tab The number of lags ("p") in the AR(p) process.\cr
}
}

\subsection{level}{
The \code{level} special is used to specify the level parameters.
\preformatted{
level(type = c("local", "shared"))
}

\tabular{ll}{
\code{type}  \tab The type of level (local or shared).\cr
}
}

\subsection{trend}{
The \code{trend} special is used to specify the trend parameters.
\preformatted{
trend(type = c("locallinear", "semilocallinear", "studentlocallinear"))
}

\tabular{ll}{
\code{type}  \tab The type of trend (local linear, semi-local linear or student local linear).\cr
}
}

\subsection{season}{
The \code{season} special is used to specify a seasonal component.
This special can be used multiple times for different seasonalities.

\strong{Warning: The inputs controlling the seasonal \code{period} is different than \code{\link[bsts:bsts]{bsts::bsts()}}. Numeric inputs are treated as the number of observations in each seasonal period, not the number of days.}

\preformatted{
season(type = c("regression", "trig", "monthlyannual"), period = NULL)
}

\tabular{ll}{
\code{type}  \tab The type of seasonality (seasonal regression, trigonometric, or monthly-annual cycle).\cr
\code{period}   \tab The periodic nature of the seasonality. If a number is given, it will specify the number of observations in each seasonal period. If a character is given, it will be parsed using \code{lubridate::as.period}, allowing seasonal periods such as "2 years".\cr
}
}

\subsection{holiday}{
The \code{holiday} special is used to specify a \code{tsibble} containing holidays for the model.
\preformatted{
holiday(holidays = NULL)
}

\tabular{ll}{
\code{holidays}   \tab A \href{https://tsibble.tidyverts.org/}{\code{tsibble}} containing a set of holiday events. The event name is given in the 'holiday' column, and the event date is given via the index. Additionally, "lower_window" and "upper_window" columns can be used to include days before and after the holiday.\cr
}
}

\subsection{xreg}{
The \code{xreg} special is used to include exogenous regressors in the model. This special can be used multiple times for different regressors with different arguments.
Exogenous regressors can also be used in the formula without explicitly using the \code{xreg()} special, which will then use the default arguments.
\preformatted{
xreg(..., prior_scale = NULL, standardize = "auto", type = NULL)
}

\tabular{ll}{
\code{...}         \tab A set of bare expressions that are evaluated as exogenous regressors\cr
\code{standardize} \tab Should the regressor be standardised before fitting? If "auto", it will standardise if the regressor is not binary.\cr
}
}
}

\examples{

if (requireNamespace("tsibbledata")) {
library(tsibble)
library(dplyr)
tsibbledata::aus_production \%>\%
  model(
    bsts = BSTS(Beer ~ season("year"))
  )
}

}
\seealso{
\itemize{
\item \code{\link[bsts:bsts]{bsts::bsts()}}
\item \href{https://sites.google.com/view/stevethebayesian/software}{bsts homepage}
\item \href{https://CRAN.R-project.org/package=bsts}{bsts R package}
}
}
